IOC container:

Bean Factory------ ApplicationContext -----> ClassPAthApp
                                     |-----> FileSystem


Spring guarantees exactly one shared bean instance for the given id per IoC container,
unlike Java Singletons, where the Singleton hardcodes the scope of an object
such that one and only one instance of a particular class will ever be created per ClassLoader.

----------
Spring beans are not thread safe per se:
Singletons are about creation. This design pattern ensures that only one instance of a class is created.

Thread safety is about execution. A piece of code is thread-safe if it only manipulates
shared data structures in a manner that guarantees safe execution by multiple threads at the same time.
-----------
ways to configure a class as Spring Bean:
XML Configuration
Java Based Configuration @Bean
Annotation Based Configuration: @Component
------------
Bean properties: class, name, scope, lazy-init, init-method, destroy-method.

Bean property injection:
    E.g.
        <bean id="" class= "">
            <Property name="" value="*.properties" />
         </bean>

     List:
        <property name="location">
            <list>
                <value>..</>
                <value>..</>
            </list>

     Reference:
        <property name....
            <ref bean="" />
            ..


Spring Bean Life Cycle
 @PostConstruct, @PreDestroy- annotations for defining post-init and pre-destroy methods.


