DataStructure: List , Tree , Map, Hashmap, Array
Ways

Backtracking:
  choose
  Explore
  Unchoose

  Backtracking is an algorithm for finding all solutions by exploring all potential candidates.
  If the solution candidate turns to be not a solution (or at least not the last one),
  backtracking algorithm discards it by making some changes on the previous step,
   i.e. backtracks and then try again.

   Use all subsets code as reference whenever need to check for all possibilties and put condition , ques specific.e.g palindrome par.
   visualize = NQueens
   without putting any brain did permutation question. just get that pattern correct.


Few Questions:
    Window sliding technique


DynamicPrgramming:

If we have processed this function before, return the result from the last time.

Otherwise calculate the result and remember it.


1. Think of a recursive approach to solving the problem.
    Essentially expressing the problem P(X) in terms of P(Y) or an expression involving P(Yi)
            where Yi is less than X.
    The "less than" here could mean multiple things. if X is an integer, then it could mean less than arithmetically.
    If X is a string, it could mean a substring of X.
    If X is an array, it could mean a subarray of X, and so forth.

2. Write a recursive code for the approach you just thought of.
            Lets say your function definition looks like this :
                    solve(A1, A2, A3 ... )

3. Save the results you get for every function run so that if solve(A1, A2, A3, ... ) is called again, you do not recompute the whole thing.

4. Analyze the space and time requirements, and improve it if possible.

    And voila, we have a DP solution ready.


Memoization is always not there.. think.
Think of memoizing as gettting result for lower numbers.

//sample pattern for simple array dp
public int climbStairs(int A) {
        int[] res = new int[A.size()];

        for(int i=0;i<=A;i++){

        }
        return res[A];
    }

//think both bottom up and top down. as JumpGameArray see all ways to solve
top down - starting with result.

A top-down (memoized) solution - recursion mostly
A bottom-up (tabular) solution - iterative mostly


https://www.quora.com/What-is-your-favourite-dynamic-programming-problem/answer/Michal-Fori%C5%A1ek?share=1&srid=3yzO


infinite coins OR minimum coins :: coins/sum(0,1,2..) matrix :: just change condition in result
https://leetcode.com/articles/coin-change/  vs CoinSumInfinite
Minimum number of Coins
Maximum rod cuts possible
coinsuminfinite
... to optimize the solution just use array[sum].

longest common subsequence OR substring :: string1 vs string2 :: check for commonality now.. bit of chnge in calculation


------------------------------------------------------------------------------------------------------------------------------------------------

Tree Problems:

Most of the binary tree problems can be solved in four steps(Split and Combine):
1. Work on the current(root) node, also called as base case.
2. Process the left sub-tree recursively.
3. Process the right sub-tree recursively.
4. Combine/Merge/choose the results from left sub-tree and right sub-tree


Array:

RainWater Taping Problems-- take min/max from left , min/max from right ,
    take min/max operate .. e.g. maxUnsortArray.

    Think if array is sorted then what to do, try to reach to that stage. example MaxDistance in bucketing


Same array operation no mem- 1 to N ... go to the index the number is , do manipulate(like
change to -1 , swap )

Think of tradeoff situations

Break problem into possibilities like overlap and non-overlap

In Arrangements like reverse swap for K break the array.

Try to get see pattern with less swaps needing.

Also check when said Integer it can be negative , zeroes.

Check edge cases when numbers : duplicates, negatives , zeroes


consider duplicates.
Consider negatives.
consider array index out of bound
consider 0 -1 in inputs.
Overrides
Return your answer modulo 10^9+7: do all ops in long then take mod with 10^9+7

STRING:

KMP  -> LPS (longest proper prefix which is also suffix)
edge cases: spaces side and between, not numeric, overflows in int, positives or negatives, overlapping (like longest distinct subsequence)


Bit manipulation:
XOR , numbers near to each other give lowest XOR


LinkeList:

Always rt. question here are not tough but lot of edge cases.
empty list. only 1 or 2 elements. about first and last element.


Stack:
Always check you are peeking into empty stack.
Some problems solve via it are tough to guess. You need to see a pattern inside it.
nearest smallest, next greatest..

Hashing:
Popular way to solve problems like 2 sum , 4 sum (also check 2 pointer approach).
few problems like main string matched with pattern. use window


Two pointer approach:
Given a sorted array A (sorted in ascending order), having N integers, find if there exists
any pair of elements (A[i], A[j]) such that their sum is equal to X.


HEAP(PriorityQueue) and treemap:

By default Min Heap is implemented by this class. To implement Max Heap, we use Collections.reverseOrder()
PriorityQueue<Integer> pQueue =  new PriorityQueue<Integer>(Collections.reverseOrder());   //max heap .. max at top
when problem needs to be stuck at min or max in every step then need to use this tech

E.g Generic is Nmax_pair_combination or MagicianAndChoco.



Trie: Searching a word

when constructing tree take needed element and do stuff recursively. check effectively u need to create left or right first.
BST: inorder  -> sorted


Greedy:
sorting is there.


Queue = Linkedlist with add and poll operations.


Graph:
Topological -> 2 stacks. go to end then put in stack.
most of the times need to have visited array
MST , Dijkstra - visited array, curr distance array, finalize array