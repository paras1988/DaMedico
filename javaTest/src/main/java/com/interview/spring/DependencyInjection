Spring framework core concepts “Dependency Injection” and “Aspect Oriented Programming”.

Inversion of Control (IoC) is the mechanism to achieve loose-coupling between Objects dependencies.
dynamic binding of the objects at runtime,

E.g:
Suppose we have an object Employee and it has a dependency on object Address.
 We would define a bean corresponding to Employee that will define its dependency on object Address.

When Spring tries to create an Employee object, it will see that Employee has a dependency on Address,
so it will first create the Address object (dependent object)
and then inject it into the Employee object.

Inversion of Control (IOC) and Dependency Injection (DI) are used interchangeably.
 IOC is achieved through DI.

 E.g:
                         IOC
                         ||
                         ||
         ServiceLocator   Events    DI

 ServiceLocator:
    class foo{
        IBar bar;
        foo(){
            bar = Container.getBar("Ibar")      --> Locating Service
        }
    }

  DI:
    class foo{
            IBar bar;
            foo(Ibar bar){
                this.bar = bar;      --> constructo DI ..Dependency Injection can be done by setter
                                                         injection or constructor injection.
            }
        }


By DI, the responsibility of creating objects is shifted from our application code
 to the Spring container; this phenomenon is called IOC.


Partial dependency: can be injected using setter injection
Overriding: Setter injection overrides the constructor injection.
Changes: We can easily change the value by setter injection.

Setter injection: Use it for optional
@Named
public class Foo {

    private Bar bar;

    @Inject
    @Required
    public void setBar(Bar bar) {
        this.bar = bar;
    }
}

Constructor Injection: Use it for mandatory
@Named
public class Foo {

    private Bar bar;

    @Inject
    public Foo(Bar bar) {
        this.bar = bar;
    }
}


Advantages:
Loose Coupling
Boilerplate code reduce
UnitTesting via mocking

Disadvantage:
Effects known at runtime